pipeline {
	    agent any
	

	        // Environment Variables
	        environment {
	        MAJOR = '1'
	        MINOR = '0'
	        //Orchestrator Services
	        UIPATH_ORCH_URL = "https://ssuipathorchmultinode.eastus.cloudapp.azure.com/"
	        UIPATH_ORCH_LOGICAL_NAME = "https://ssuipathorchmultinode.eastus.cloudapp.azure.com/"
	        UIPATH_ORCH_TENANT_NAME = "Default"
	        UIPATH_ORCH_FOLDER_NAME = "Shared"
			UIPATH_PACKAGE_PATH = ""
	    }
	

	    stages {
	

	        // Printing Basic Information
	        stage('Preparing'){
	            steps {
	                echo "Jenkins Home ${env.JENKINS_HOME}"
	                echo "Jenkins URL ${env.JENKINS_URL}"
	                echo "Jenkins JOB Number ${env.BUILD_NUMBER}"
	                echo "Jenkins JOB Name ${env.JOB_NAME}"
	                echo "GitHub BranhName ${env.BRANCH_NAME}"
	                checkout scm
	

	            }
	        }
	

	         // PowerShell Script
	        stage('Build') {
	            steps {
	                echo "BPowerShell Script Execution... ${WORKSPACE}"
					
					powershell '''
					
						# Define the repository and branch to check
						$repo = "https://github.com/sagarsable71190/UiPath-Jenkins-CICD-003.git"
						$branch = "uat"

						# Get the latest commit SHA for the branch
						$url = "https://api.github.com/repos/$repo/branches/$branch"
						$response = Invoke-RestMethod -Uri $url -Headers $headers
						$sha = $response.commit.sha

						# Get the list of changed files for the commit
						$url = "https://api.github.com/repos/$repo/commits/$sha"
						$response = Invoke-RestMethod -Uri $url -Headers $headers
						$files = $response.files.filename

						# Loop through the changed files and do something with each one
						foreach ($file in $files) {
							Write-Host "Processing file: $file"
							# Do something with the file, e.g. download it
							
					
					'''
					
	            }
	        }
	

	    // Options
	    options {
	        // Timeout for pipeline
	        timeout(time:80, unit:'MINUTES')
	        skipDefaultCheckout()
	    }
	
	    // 
	    post {
	        success {
	            echo 'Deployment has been completed!'
	        }
	        failure {
	          echo "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.JOB_DISPLAY_URL})"
	        }
	        always {
				echo 'Always Executed!'
	            /* Clean workspace if success */
	            //cleanWs()
	        }
	    }
	

	}
